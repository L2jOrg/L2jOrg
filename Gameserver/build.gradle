import java.text.SimpleDateFormat
import java.util.regex.Matcher

plugins {
    id "application"
}

ext.updateName = "Classic - Kamael [Dawn of Heroes]"

ext.moduleName = 'org.l2j.gameserver'
mainClassName = "org.l2j.gameserver.GameServer"

ext.datapackRoot = "."

sourceSets {
    main {
        java {
            srcDirs = ['src/main/org.l2j.gameserver']

        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
}

configurations.all {
    // Check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
    implementation project(':Commons')

    runtimeOnly 'mysql:mysql-connector-java:8.0.26'
    runtimeOnly 'org.ehcache:ehcache:3.9.6'
    runtimeOnly 'org.apache.logging.log4j:log4j-slf4j18-impl:2.15.0'
    runtimeOnly project(':Script')
}

task createVersionFile(dependsOn: processResources) {
    doLast {
        new File("$buildDir/resources/main/version.properties").withWriter { w ->
            def p = new Properties()
            p['version'] = rootProject.version
            p['revision'] = rootProject.ext.revision
            p['buildDate'] =new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date())
            p['compilerVersion'] = rootProject.ext.buildJDK
            p['update'] = updateName
            p.store w, null
        }
    }
}

classes {
    dependsOn createVersionFile
}

jar {
    exclude('config/**')
    exclude('*.cfg')
    exclude('sql/**')
    
    manifest {
        attributes('Built-By'       : System.getProperty('user.name'),
                   'Build-Timestamp': new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                   'Build-Revision' : rootProject.ext.revision,
                   'Build-Version'  : rootProject.version,
                   'Build-Jdk'      : rootProject.ext.buildJDK,
                   'Main-Class'     : 'org.l2j.gameserver.GameServer')
    }
}

run {
    inputs.property("moduleName", moduleName)
    doFirst {
        def args = jvmArgs
        args << "--enable-preview" << "-Dfile.encoding=UTF-8" << "-XX:+UseZGC" << "--module-path" << classpath.asPath << '--class-path' << classpath.asPath << '--add-exports' << 'java.base/jdk.internal.misc=io.github.joealisson.primitive' << '--module' << "$moduleName/$mainClassName".toString()
        jvmArgs = args
    }
}

startScripts {
    inputs.property("moduleName", moduleName)
    doFirst {
        classpath = files()
        defaultJvmOpts = [
                '--enable-preview',
                '-Dfile.encoding=UTF-8',
                '-XX:+UseZGC',
                '--module-path', 'APP_HOME_LIBS',
                '--module', "$moduleName/$mainClassName",
                '--source', sourceCompatibility,
                '--add-exports', 'java.base/jdk.internal.misc=io.github.joealisson.primitive'
        ]
    }
    doLast{
        def bashFile = new File(outputDir, applicationName)
        String bashContent = bashFile.text
        bashFile.text = bashContent.replaceFirst('APP_HOME_LIBS', Matcher.quoteReplacement('$APP_HOME/lib'))

        def batFile = new File(outputDir, applicationName + ".bat")
        String batContent = batFile.text
        batFile.text = batContent.replaceFirst('APP_HOME_LIBS', Matcher.quoteReplacement('%APP_HOME%\\lib'))
    }
}


task dist {
    doLast {
        copy {
            from([configurations.compileClasspath, configurations.runtimeClasspath, jar]) {
                include "*.jar"
            }
            into("$buildDir/gameserver/lib")
        }

        copy {
            from(["$sourceSets.main.output.resourcesDir", 'bin'])
            into("$buildDir/gameserver")
        }
    }
}


processResources {
    outputs.upToDateWhen { false }
    doFirst {
        filesMatching('**/server.properties') {
            filter {
                it.replace('${datapack_root}', project.ext.datapackRoot)
            }
        }
    }
}

gradle.taskGraph.whenReady { taskGraph ->
    if(gradle.taskGraph.hasTask(':Gameserver:run')) {
        ext.datapackRoot = "../Datapack/"
    }
}

jar.finalizedBy dist
